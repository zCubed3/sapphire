# MIT License
#
# Copyright (c) 2023 zCubed (Liam R.)
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# We take contents of a text or binary file and simply insert it into a header

import sys
import os
import hashlib

verbose = False

in_path = sys.argv[1]
out_path = sys.argv[2]
mode = "binary"

if len(sys.argv) >= 4:
    for a in range(3, len(sys.argv)):
        arg = sys.argv[a]

        if arg.startswith("mode="):
            mode = arg.replace("mode=", "")

source = ""

out_name = os.path.basename(out_path)

source_name = os.path.basename(in_path)
source_name = os.path.splitext(source_name)[0]
source_name = source_name.replace(".", "_")

print(f"Generating resource header '{out_name}'...")

if verbose:
    print(f"\tInput: {sys.argv[1]}")
    print(f"\tOutput: {sys.argv[2]}")
    print(f"\tMode: {mode}")

open_flags = "r"

if mode == "binary":
    open_flags += "b"

with open(sys.argv[1], open_flags) as src_file:
    source = src_file.read()

    if mode == "text":
        source = source.encode("ascii")

# Hash the source to make sure it has changed
source_hash = hashlib.md5(source).hexdigest()

if verbose:
    print(f"\tHash: {source_hash}")

matching = False
if os.path.exists(sys.argv[2]):
    with open(sys.argv[2], "r") as out_file:
        hash_line = out_file.readline().replace("// Hash:", "").strip()
        matching = hash_line == source_hash

if not matching:
    with open(sys.argv[2], "w") as out_file:
        out_file.write(f"// Hash: {source_hash}\n")

        out_file.write("//\n")
        out_file.write("// Generated by gen_resource_header.py\n")
        out_file.write("//\n\n")

        source_repr = source

        if mode == "binary":
            out_file.write(f"const unsigned char {source_name.upper()}_CONTENTS[] = {{")

            i = 0
            for b in source:
                if i > 0:
                    out_file.write(', ')

                if i % 16 == 0:
                    out_file.write('\n\t')

                out_file.write(f'0x{b:02X}')
                i += 1

            out_file.write("\n};")

        if mode == "text":
            source_repr = repr(source).removeprefix('b')
            source_repr = source_repr.removeprefix("'").removesuffix("'")

            out_file.write(f"const char {source_name.upper()}_CONTENTS[] = \"{source_repr}\";")
else:
    if verbose:
        print("\tHashes match! Not updating...")
